---
title: "Using R to Predict Antimicrobial Resistance Rates." 
subtitle: "Analysis performed using antimicrobial susceptibility test data for all isolates from blood cultures collected at NUTH from Q1 2019 onwards."
institute: "Newcastle upon Tyne Hospitals NHS Foundation Trust"
author: "Daniel Weiand" 
#date: "`r format(Sys.time(), '%a %B %d %Y')`" 
date: today
date-format: "dddd, D MMMM, YYYY"
self-contained: true

# #Some options need to be set in format > html
format:
  html:
    #output-file: 'file' #Output file to write to
    #output-ext: #Extension to use for generated output file
    code-fold: false
    code_download: true
    embed-resources: true
    standalone: true
    toc: true #Include an automatically generated table of contents. This option has no effect if standalone is false.
    toc-depth: 2 #Specify the number of section levels to include in the table of contents. The default is 3
    toc_float: TRUE
    highlight-style: pygments
    fig-path: 'figures/'
    fig-width: 9 #default is 7
    fig-asp: 0.618 #When fig-asp is specified, the height of a plot (the option fig-height) is calculated from fig-width * fig-asp (the golden ratio is 0.618).
    # fig-height: 6 #default is 7
    fig-align: 'left' #Possible values are default, left, right, and center.
    fig-format: 'png' #The graphical device to generate plot files. retina, png, jpeg, svg, or pdf
    fig-cap-location: 'top' #top bottom or margin
    fig-dpi: 300 #The DPI (dots per inch) for bitmap devices (default = 72)
    df-print: paged #kable, tibble or paged. The default printing method is kable.
    theme:
    - mystyle.scss
    - default #Quarto includes 25 themes from the Bootswatch project (for example, the website uses the cosmo theme). Available themes include: default cerulean cosmo cyborg darkly flatly journal litera lumen lux materia minty morph pulse quartz sandstone simplex sketchy slate solar spacelab superhero united vapor yeti zephyr
    
# #Some options need to be set in format > docx
# format:
#   docx:
#     reference-doc: word-styles-reference-01.docx #Word document that will be used as a style reference in producing final docx (Word) document
#     toc: true #Include an automatically generated table of contents. This option has no effect if standalone is false.
#     toc-depth: 1 #Specify the number of section levels to include in the table of contents. The default is 3
#     toc-title: 'Table of Contents' #The title used for the table of contents.
#     page-width: 6.5 #Target page width for output (used to compute columns widths for layout divs). Defaults to 6.5 inches, which corresponds to default letter page settings in docx and odt.
#     fig-path: 'figures/'
#     fig-width: 5 #default is 7
#     fig-asp: 0.618 #When fig-asp is specified, the height of a plot (the option fig-height) is calculated from fig-width * fig-asp (the golden ratio is 0.618).
#     # fig-height: 6 #default is 7
#     fig-align: 'center' #Possible values are default, left, right, and center.
#     fig-format: 'svg' #The graphical device to generate plot files. retina, png, jpeg, svg, or pdf
#     fig-cap-location: 'top' #top bottom or margin
#     fig-dpi: 300 #The DPI (dots per inch) for bitmap devices (default = 72)
#     df-print: default #kable, tibble or paged. The default printing method is kable.

# # Some options need to be set in format > revealjs
# format:
#   revealjs:
#     incremental: true #Incrementally reveal elements https://rstudio-conf-2022.github.io/get-started-quarto/materials/05-presentations.html#/lists
#     width: 1600
#     height: 900
#     #css: ["mystyle.css"]
#     default-image-extension: png
#     theme: serif #full list of available themes: beige blood dark default league moon night serif simple sky solarized
#     scrollable: true
#     smaller: true
#     transition: fade
#     transition-speed: fast
#     reference-location: document #If you prefer that footnotes be included at the end of the document, specify the reference-location: document option
#     logo: Newcastlelaboratories_logo.png
#     #footer: "Footer text"
#     menu:
#       side: left #Navigation Menu location
#       width: normal    #Navigation Menu width
#       numbers: true 	#Add slide numbers to menu items.
#     slide-number: c/t #c/t = Slide number / total slides (default)
#     show-slide-number: all #all = Show slide numbers in all contexts (default)
#     embed-resources: true
#     standalone: true

#Some referencing options need to be set in bibliography:, csl:, and link-citations: 
bibliography: biblio.bib  #Document bibliography (BibTeX or CSL). May be a single file or a list of files
csl: bmj.csl #Citation Style Language file to use for formatting references.
link-citations: yes

#Some code chunk options need to be set in execute (credit: @rappa753)
execute:
  echo: FALSE #Include cell source code in rendered output. 
  warning: FALSE #If FALSE, all warnings will be printed in the console instead of the output document
  error: TRUE #By default, the code evaluation will not stop even in case of errors! If we want to stop on errors, we need to set this option to FALSE.
  message: FALSE #Whether to preserve messages emitted by message() (similar to the option warning
  cache: FALSE #use the cache option to cache the results of computations. You may however need to manually refresh the cache if you know that some other input (or even time) has changed sufficiently to warrant an update. To do this, render either individual files or an entire project using the --cache-refresh option, e.g. [terminal] quarto render mydoc.qmd --cache-refresh # single doc or [terminal] quarto render --cache-refresh # entire project

editor: source

# parameterized reporting
params:
  directorate_recoded: "NA"
  directorate: "NA"
  location_code: "NA"
  paediatric: "NA"
  elderly_care: "NA"
  diabetic: "NA"
  urology: "NA"
  renal_chd: "NA"
  # year: "NA"
# location_code: {{ location_code }}
# as_mo_genus: 'Candida'
# year: 2021

---

```{r project_setup}
#| eval: true
#| include: false
#| echo: false
#| error: false
#| message: false
#| label: project setup

library(here)

source(here("01_src", "01_initialise.R"))

```

```{r data_import}
#| eval: true
#| include: false
#| echo: false
#| error: false
#| message: false
#| label: data import

source(here("01_src", "02_data_import - read database.R"))

```

```{r params}
#| eval: true
#| include: false
#| echo: false
#| error: false
#| message: false
#| label: params

source(here("01_src", "03_wrangle - params from db.R"))

```

```{r functions}
#| eval: true
#| include: false
#| echo: false
#| error: false
#| message: false
#| label: wrangle AMR data

# functions ---------------------------------------------------------------

source(here("01_src", "03_wrangle - functions.R"))

```

```{r wrangle_AMR_predict}
#| eval: true
#| include: false
#| echo: false
#| error: false
#| message: false
#| label: wrangle AMR predict


source(here("01_src", "03_wrangle - AMR_predict_functions.R"))

```

```{r wrangle_survival_data}
#| eval: true
#| include: false
#| echo: false
#| error: false
#| message: false
#| label: wrangle survival data

source(here("01_src", "03_wrangle - survival analysis.R"))

```


# Parameter(s) for report

This report focuses on the following parameter(s):

<!-- Directorate: **`r params$directorate`** -->

Directorate: **`r params$directorate_recoded`**

Location of blood culture collection: **`r params$location_code`**

Diabetic: **`r params$diabetic`**

Patient age (Paediatric): **`r params$paediatric`**

Elderly care: **`r params$elderly_care`**

Urology: **`r params$urology`**

Renal CHD: **`r params$renal_chd`**

<!-- Date of blood culture receipt (year): **`r params$year`** -->

# Introduction

This paper reports on predicted drug resistance rates, modelled in R, using antimicrobial susceptibility data for all organisms isolated from blood cultures collected at NUTH from Q1 2019 onwards.

# Aim

To model predicted drug resistance rates using the [AMR](https://msberends.github.io/AMR/articles/AMR.html) package for [R](https://nhsrcommunity.com/installing-r-and-r-studio/).

# Methods

## LIMS data

`r min_date <- as_date(min(data_1st$receive_date))
max_date <- as_date(max(data_1st$receive_date))
glue::glue("The LIMS was interrogated to collect data on all culture-positive blood cultures collected between {min_date} and {max_date}")`
.

## The AMR package for R

![](NHS-R/amr-pub.png)

- The [AMR](https://msberends.github.io/AMR/articles/AMR.html) package [@AMR2022; @R-AMR] is a free, open-source and independent package for [R](https://nhsrcommunity.com/installing-r-and-r-studio/) [@R-base] that provides a standard for clean and reproducible analysis and prediction of Antimicrobial Resistance (AMR). 

- This package was used to determine 'first isolates', as per Hindler et al [@hindler2007analysis], for use in the final analysis; calculate and visualise AMR data; and predict future AMR rates using regression models.

## The concept of 'first isolates'

To conduct an analysis of antimicrobial resistance, Hindler et al [@hindler2007analysis] posit that one should only include the first isolate of every patient per episode. This approach avoids overestimating or underestimating AMR rates [@AMR2022; @R-AMR]. The [AMR](https://msberends.github.io/AMR/articles/AMR.html) package was used to determine 'first isolates' for use in the final analysis.

## Predicting future AMR rates 

- The [AMR](https://msberends.github.io/AMR/articles/AMR.html) package [@AMR2022; @R-AMR] includes functions which, based on a date column, calculates cases per year and uses a regression model to predict antimicrobial resistance.

- The resistance_predict() function creates a prediction model including standard errors (SE), which are returned as columns se_min and se_max. 

- Valid options for the statistical model (argument model) are: "binomial", "poisson" and "linear".

## The NHSRplotthedots package for R

The {[NHSRplotthedots](https://github.com/nhs-r-community/NHSRplotthedots/)} package [@R-NHSRplotthedots] for [R](https://nhsrcommunity.com/installing-r-and-r-studio/) [@R-base] is used to plot time series data and detect special cause variation by applying statistical process control (SPC) rules. 

## Survival analysis

The {ggsurvfit} and {survival} packages [@R-ggsurvfit; @R-survival; @survival-book] for [R](https://nhsrcommunity.com/installing-r-and-r-studio/) [@R-base] are used to conduct survival analyses .

## Limitations

Only phenotypic AST results are included in this analysis (e.g. "R", "I", and "S"). In other words, data stored as disk diffusion zone sizes (e.g. 20mm) or MIC values (e.g. 1mg/L) are not included. Phenotypic AST results recorded as "D" are recoded as "R" to facilitate analysis using the  [AMR](https://msberends.github.io/AMR/articles/AMR.html) package [@AMR2022; @R-AMR].

With regards to survival data, the Newcastle upon Tyne Hospitals NHS Foundation Trust's bereavement ledger only includes information on patients who died in hospital. No information is available on the status or date of date of patients who may have died in the community or at other Trusts. As a result, the mortality data outlined in the survival analysis are likely to underestimate patients' true mortality rates.

With regards to drug resistance rates, these are not easily predicted; for particular drug-bug combinations, the spread (i.e. standard error) can be very large. Generalised linear regression models using a binomial distribution assume that a period of zero resistance was followed by a period of increasing resistance leading slowly to more and more resistance. Where the standard error is very large, a linear model might be more appropriate. The [AMR](https://msberends.github.io/AMR/articles/AMR.html) package [@AMR2022; @R-AMR] facilitates modelling of drug resistance rates using either binomial or linear distributions. The chosen model is stated in each figure. 

# Totals 

In total, `r data_clean_sens |>
distinct(specimen_no) |> 
count() |> 
pull()` distinct positive blood cultures were collected from `r data_clean_sens |> 
distinct(hospital_number) |> 
count() |> 
pull()` distinct patients, leading to isolation of `r data_clean_sens |> 
distinct(specimen_no, organism_code) |> 
count() |> 
pull()` organisms. 

Taking into consideration **'first isolates'** only, `r data_1st |>
distinct(specimen_no) |> 
count() |> 
pull()` distinct positive blood cultures were collected from `r data_1st |> 
distinct(hospital_number) |> 
count() |> 
pull()` distinct patients, leading to isolation of `r data_1st |> 
distinct(specimen_no, organism_code) |> 
count() |> 
pull()` organisms. 

**From this point onwards, this analysis concentrates only on 'first isolates' from blood cultures**

# Location of blood culture collection

## Hospital

```{r hospital}
#Location of blood culture collection - Hospital
data_1st %>%  
  filter(!is.na(hospital)) |> 
  group_by(hospital) %>% 
  summarise(n = n()) %>% 
  #filter(n >1) %>% #only organisms isolated more than X times
  ggplot(aes(x = reorder(hospital, -n), y = n))+
  geom_col()+
  theme_minimal()+
  coord_flip()+
  labs(title = "Hospital where blood culture collected",
       subtitle = "First blood culture isolate per patient, Q1 2019 onwards",
       x = "Hospital",
       y = "n")
```

## Directorate

```{r directorate_recoded_lump}
#top directorates of blood culture collection
data_1st %>% 
  filter(!is.na(directorate_recoded)) |> 
  mutate(directorate_recoded_lump = fct_lump_n(directorate_recoded, 10)) |> 
  group_by(directorate_recoded_lump) %>%
  summarise(total = n()) %>% 
  filter(total >1) %>% #only organisms isolated more than X times
  ggplot(aes(x = reorder(directorate_recoded_lump, -total), y = total))+
  geom_col()+
  coord_flip()+
  theme_minimal()+
  scale_fill_grey()+
  labs(title = "Blood culture collection directorate",
       subtitle = "First blood culture isolate per patient, Q1 2019 onwards",
       x = "Ward",
       y = "n")
```

## Ward (top 10)

```{r location_lump}
#top 10 locations of blood culture collection
data_1st %>%
  mutate(location_lump = fct_lump_n(location_code, 10)) |>
  group_by(location_lump) %>%
  summarise(total = n()) %>%
  filter(total >1) %>% #only organisms isolated more than X times
  ggplot(aes(x = reorder(location_lump, -total), y = total))+
  geom_col()+
  coord_flip()+
  theme_minimal()+
  scale_fill_grey()+
  labs(title = "Top 10 blood culture collection locations",
       subtitle = "First blood culture isolate per patient, Q1 2019 onwards",
       x = "Ward",
       y = "n")
```

# Age-related data

Age of patients with positive blood cultures

```{r age_histogram}
#histogram number of positive blood cultures by age
data_1st %>% 
  filter(!is.na(age)) %>%
  ggplot(aes(x = age))+
  geom_histogram(bins = 30)+
  theme_minimal()+
  labs(title = "Age of patients with positive blood cultures",
       subtitle = "First blood culture isolate per patient, Q1 2019 onwards",
       x = "Age",
       y = "n")
```

# Top 10 organisms 

## Pareto chart 

Figure showing total blood culture isolates per species, plus the cumulative sum total

```{r pareto_as_mo_shortname_lump_cum_count_species}
#pareto chart showing cum_count instead of cum_percent - as_mo_shortname
data_1st |> 
  freq(as_mo_shortname_lump) |>  
  ungroup() |> 
  mutate(cum_percent = cum_percent*100,
         item = factor(item, levels=item)) |> #Converting the categorical variable to a factor is really important here
  ggplot(aes(x = item))+
  geom_point(aes(y = cum_count), color = rgb(0, 1, 0), pch=16, size=1)+
  geom_bar(aes(y = count), fill = "grey", stat="identity")+
  geom_line(aes(y=cum_count, group=1), colour="black", lty=3, size=0.9) +
  theme(axis.text.x = element_text(hjust = 1,
                                   angle = 45))+
  labs(title = "The most common blood culture isolates",
       subtitle = "First blood culture isolate per patient, Q1 2019 onwards",
       x = "Organism",
       y = "n")
```
## Mean age of infection with top 10 organisms

```{r top_10_as_mo_shortname_lump_age}
#mean age of infection, stratified by organism (lumped)
data_1st %>% 
  ggplot(aes(age, reorder(as_mo_shortname_lump, desc(age))))+
  geom_boxplot()+
  labs(title = "Age of patients with positive blood cultures\nstratified by species of organism isolated",
       subtitle = "First blood culture isolate per patient, Q1 2019 onwards",
       x = "Age",
       y = "Species")
```

# Time series data

## Interactive chart

Interactive figure showing total blood culture isolates per species over time

```{r BC_data_over_time_interactive}
# BC data over time stratified by top 10 organisms

ggplot_ggiraph_orgs <- data_1st %>% 
  filter(!is.na(directorate_recoded)) |> 
  mutate(new_date = floor_date(receive_date, 
                               unit = "3 months",
                               week_start = getOption("lubridate.week.start", 1)),
         year = year(receive_date)) %>% 
  distinct(new_date, specimen_no, as_mo_shortname_lump, .keep_all = TRUE) |> 
  group_by(year, new_date, as_mo_shortname_lump) %>%
  count() %>% 
  thicken(interval = "month",
          colname = 'thickened_date') |> 
  ungroup() |> 
  select(-new_date) |> 
  pad(interval = "3 months") %>% 
  fill_by_value() %>% 
  ggplot() +
  ggiraph::geom_line_interactive(aes(x = thickened_date, y = n, colour = as_mo_shortname_lump, data_id = as_mo_shortname_lump, tooltip = as_mo_shortname_lump), linewidth = 1.5)+
  #coord_flip()+
  guides(colour = "legend")

# girafe_css(
#   css = "fill:orange;stroke:gray;",
#   text = "stroke:none; font-size: larger",
#   line = "fill:none",
#   area = "stroke-width:3px",
#   point = "stroke-width:3px",
#   image = "outline:2px red"
# )

girafe(ggobj = ggplot_ggiraph_orgs,
            options = list(
              opts_hover(css = "stroke:black;r:20pt;"),
              opts_hover_inv(css = "opacity:0.2;"),
              opts_sizing(rescale = FALSE),
              opts_zoom(min = .7, max = 2)#,
            #height_svg = 10,
            #width_svg = 12
))

```

## Positive blood cultures per month

## Distinct positive blood cultures per month

```{r NHSRplotthedots_specimens_n}
#number of distinct positive blood cultures per month (using NHSRplotthedots)
data_1st %>% 
  filter(!is.na(directorate_recoded)) |> 
  mutate(new_date = floor_date(receive_date, 
                               unit = "1 month",
                               week_start = getOption("lubridate.week.start", 1)),
         year = year(receive_date)) %>% 
  distinct(new_date, specimen_no, .keep_all = TRUE) |> 
  group_by(year, new_date) %>%
  count() %>% 
  thicken(interval = "month",
          colname = 'thickened_date') |> 
  ungroup() |> 
  select(-new_date) |> 
  pad(interval = "month") %>% 
  fill_by_value() %>% 
  ptd_spc(value_field = n, date_field = thickened_date, improvement_direction = "decrease") %>% 
  ptd_create_ggplot(point_size = 2,
                    percentage_y_axis = FALSE,
                    main_title = "SPC chart",
                    x_axis_label = "date",
                    y_axis_label = "distinct patients (n)",
                    fixed_x_axis_multiple = TRUE,
                    fixed_y_axis_multiple = TRUE,
                    x_axis_date_format = "%m/%y",
                    x_axis_breaks = "3 months",
                    y_axis_breaks = NULL,
                    icons_size = 0L,
                    icons_position = c("top right", "bottom right", "bottom left", "top left", "none"),
                    colours = ptd_spc_colours(),
                    theme_override = NULL,
                    break_lines = c("both", "limits", "process", "none"))+
  labs(title = "Distinct positive blood cultures per month",
       subtitle = "First blood culture isolate per patient, Q1 2019 onwards",
       x = NULL,
       y = "n")+
  scale_y_continuous(minor_breaks = NULL,
                     breaks = function(x) unique(floor(pretty(seq(0, (max(x) + 1) * 1.1)))))

```

As outlined in the methods section, the {[NHSRplotthedots](https://github.com/nhs-r-community/NHSRplotthedots/)} package for [R](https://nhsrcommunity.com/installing-r-and-r-studio/) was used to plot time series data and detect special cause variation. This package uses the SPC rules outlined in the [Making Data Count](https://www.england.nhs.uk/wp-content/uploads/2019/12/making-data-count-getting-started-2019.pdf) document published by NHSI (page 23 onwards).

## Distinct patients with positive blood cultures per month

```{r NHSRplotthedots_patients_n}
#number of distinct patients with positive blood cultures per month (using NHSRplotthedots)
data_1st %>%
  filter(!is.na(directorate_recoded)) |> 
  mutate(new_date = floor_date(receive_date, 
                               unit = "1 month",
                               week_start = getOption("lubridate.week.start", 1)),
         year = year(receive_date)) %>% 
  distinct(new_date, hospital_number, .keep_all = TRUE) |> 
  group_by(year, new_date) %>%
  count() %>% 
  thicken(interval = "month",
          colname = 'thickened_date') |> 
  ungroup() |> 
  select(-new_date) |> 
  pad(interval = "month") %>% 
  fill_by_value() %>% 
  ptd_spc(value_field = n, date_field = thickened_date, improvement_direction = "decrease") %>% 
  ptd_create_ggplot(point_size = 2,
                    percentage_y_axis = FALSE,
                    main_title = "SPC chart",
                    x_axis_label = "date",
                    y_axis_label = "distinct patients (n)",
                    fixed_x_axis_multiple = TRUE,
                    fixed_y_axis_multiple = TRUE,
                    x_axis_date_format = "%m/%y",
                    x_axis_breaks = "3 months",
                    y_axis_breaks = NULL,
                    icons_size = 0L,
                    icons_position = c("top right", "bottom right", "bottom left", "top left", "none"),
                    colours = ptd_spc_colours(),
                    theme_override = NULL,
                    break_lines = c("both", "limits", "process", "none"))+
  labs(title = "Distinct patients with bacteraemias per month",
       subtitle = "First blood culture isolate per patient, Q1 2019 onwards",
       x = NULL,
       y = "n")+
  scale_y_continuous(minor_breaks = NULL,
                     breaks = function(x) unique(floor(pretty(seq(0, (max(x) + 1) * 1.1)))))

```

## E. coli blood culture data

### Distinct patients with positive blood cultures per month

```{r NHSRplotthedots_patients_E_coli}
#number of distinct patients with positive blood cultures per month (using NHSRplotthedots)
data_1st %>% 
  filter(as_mo_shortname == "E. coli") |> 
  mutate(new_date = floor_date(receive_date, 
                               unit = "1 month",
                               week_start = getOption("lubridate.week.start", 1)),
         year = year(receive_date)) %>% 
  distinct(new_date, hospital_number, .keep_all = TRUE) |> 
  group_by(year, new_date) %>%
  count() %>% 
  thicken(interval = "month",
          colname = 'thickened_date') |> 
  ungroup() |> 
  select(-new_date) |> 
  pad(interval = "month") %>% 
  fill_by_value() %>% 
  ptd_spc(value_field = n, date_field = thickened_date, improvement_direction = "decrease") %>% 
  ptd_create_ggplot(point_size = 2,
                    percentage_y_axis = FALSE,
                    main_title = "SPC chart",
                    x_axis_label = "date",
                    y_axis_label = "distinct patients (n)",
                    fixed_x_axis_multiple = TRUE,
                    fixed_y_axis_multiple = TRUE,
                    x_axis_date_format = "%m/%y",
                    x_axis_breaks = "3 months",
                    y_axis_breaks = NULL,
                    icons_size = 0L,
                    icons_position = c("top right", "bottom right", "bottom left", "top left", "none"),
                    colours = ptd_spc_colours(),
                    theme_override = NULL,
                    break_lines = c("both", "limits", "process", "none"))+
  labs(title = "Distinct patients with E. coli bacteraemias per month",
       subtitle = "First blood culture isolate per patient, Q1 2019 onwards",
       x = NULL,
       y = "n")+
  scale_y_continuous(minor_breaks = NULL,
                     breaks = function(x) unique(floor(pretty(seq(0, (max(x) + 1) * 1.1)))))
```

### Days since last E. coli bacteraemia

```{r days_since_last_e_coli}
data_1st |> 
  days_between(search_criterion = as_mo_shortname,
               organism_of_interest = "E. coli")
```

## Klebsiella blood culture data

### Distinct patients with positive blood cultures per month

```{r NHSRplotthedots_patients_Klebsiella}
#number of distinct patients with positive blood cultures per month (using NHSRplotthedots)
data_1st %>% 
  filter(as_mo_genus == "Klebsiella") |> 
  mutate(new_date = floor_date(receive_date, 
                               unit = "1 month",
                               week_start = getOption("lubridate.week.start", 1)),
         year = year(receive_date)) %>% 
  distinct(new_date, hospital_number, .keep_all = TRUE) |> 
  group_by(year, new_date) %>%
  count() %>% 
  thicken(interval = "month",
          colname = 'thickened_date') |> 
  ungroup() |> 
  select(-new_date) |> 
  pad(interval = "month") %>% 
  fill_by_value() %>% 
  ptd_spc(value_field = n, date_field = thickened_date, improvement_direction = "decrease") %>% 
  ptd_create_ggplot(point_size = 2,
                    percentage_y_axis = FALSE,
                    main_title = "SPC chart",
                    x_axis_label = "date",
                    y_axis_label = "distinct patients (n)",
                    fixed_x_axis_multiple = TRUE,
                    fixed_y_axis_multiple = TRUE,
                    x_axis_date_format = "%m/%y",
                    x_axis_breaks = "3 months",
                    y_axis_breaks = NULL,
                    icons_size = 0L,
                    icons_position = c("top right", "bottom right", "bottom left", "top left", "none"),
                    colours = ptd_spc_colours(),
                    theme_override = NULL,
                    break_lines = c("both", "limits", "process", "none"))+
  labs(title = "Distinct patients with Klebsiella bacteraemias per month",
       subtitle = "First blood culture isolate per patient, Q1 2019 onwards",
       x = NULL,
       y = "n")+
  scale_y_continuous(minor_breaks = NULL,
                     breaks = function(x) unique(floor(pretty(seq(0, (max(x) + 1) * 1.1)))))
```

### Days since last Klebsiella bacteraemia

```{r days_since_last_klebsiella}
data_1st |> 
  days_between(search_criterion = as_mo_genus,
               organism_of_interest = "Klebsiella")
```

## P. aeruginosa blood culture data

### Distinct patients with positive blood cultures per month

```{r NHSRplotthedots_patients_P_aeruginosa}
#number of distinct patients with positive blood cultures per month (using NHSRplotthedots)
data_1st %>% 
  filter(as_mo_shortname == "P. aeruginosa") |> 
  mutate(new_date = floor_date(receive_date, 
                               unit = "1 month",
                               week_start = getOption("lubridate.week.start", 1)),
         year = year(receive_date)) %>% 
  distinct(new_date, hospital_number, .keep_all = TRUE) |> 
  group_by(year, new_date) %>%
  count() %>% 
  thicken(interval = "month",
          colname = 'thickened_date') |> 
  ungroup() |> 
  select(-new_date) |> 
  pad(interval = "month") %>% 
  fill_by_value() %>% 
  ptd_spc(value_field = n, date_field = thickened_date, improvement_direction = "decrease") %>% 
  ptd_create_ggplot(point_size = 2,
                    percentage_y_axis = FALSE,
                    main_title = "SPC chart",
                    x_axis_label = "date",
                    y_axis_label = "distinct patients (n)",
                    fixed_x_axis_multiple = TRUE,
                    fixed_y_axis_multiple = TRUE,
                    x_axis_date_format = "%m/%y",
                    x_axis_breaks = "3 months",
                    y_axis_breaks = NULL,
                    icons_size = 0L,
                    icons_position = c("top right", "bottom right", "bottom left", "top left", "none"),
                    colours = ptd_spc_colours(),
                    theme_override = NULL,
                    break_lines = c("both", "limits", "process", "none"))+
  labs(title = "Distinct patients with P. aeruginosa bacteraemias per month",
       subtitle = "First blood culture isolate per patient, Q1 2019 onwards",
       x = NULL,
       y = "n")+
  scale_y_continuous(minor_breaks = NULL,
                     breaks = function(x) unique(floor(pretty(seq(0, (max(x) + 1) * 1.1)))))
```

### Days since last P. aeruginosa bacteraemia

```{r days_since_last_P_aeruginosa}
data_1st |> 
  days_between(search_criterion = as_mo_shortname,
               organism_of_interest = "P. aeruginosa")
```

## S. aureus blood culture data

### Distinct patients with positive blood cultures per month

```{r NHSRplotthedots_patients_S_aureus}
#number of distinct patients with positive blood cultures per month (using NHSRplotthedots)
data_1st %>% 
  filter(as_mo_shortname == "S. aureus") |> 
  mutate(new_date = floor_date(receive_date, 
                               unit = "1 month",
                               week_start = getOption("lubridate.week.start", 1)),
         year = year(receive_date)) %>% 
  distinct(new_date, hospital_number, .keep_all = TRUE) |> 
  group_by(year, new_date) %>%
  count() %>% 
  thicken(interval = "month",
          colname = 'thickened_date') |> 
  ungroup() |> 
  select(-new_date) |> 
  pad(interval = "month") %>% 
  fill_by_value() %>% 
  ptd_spc(value_field = n, date_field = thickened_date, improvement_direction = "decrease") %>% 
  ptd_create_ggplot(point_size = 2,
                    percentage_y_axis = FALSE,
                    main_title = "SPC chart",
                    x_axis_label = "date",
                    y_axis_label = "distinct patients (n)",
                    fixed_x_axis_multiple = TRUE,
                    fixed_y_axis_multiple = TRUE,
                    x_axis_date_format = "%m/%y",
                    x_axis_breaks = "3 months",
                    y_axis_breaks = NULL,
                    icons_size = 0L,
                    icons_position = c("top right", "bottom right", "bottom left", "top left", "none"),
                    colours = ptd_spc_colours(),
                    theme_override = NULL,
                    break_lines = c("both", "limits", "process", "none"))+
  labs(title = "Distinct patients with S. aureus bacteraemias per month",
       subtitle = "First blood culture isolate per patient, Q1 2019 onwards",
       x = NULL,
       y = "n")+
  scale_y_continuous(minor_breaks = NULL,
                     breaks = function(x) unique(floor(pretty(seq(0, (max(x) + 1) * 1.1)))))

```

### Days since last S. aureus bacteraemia

```{r days_since_last_s_aureus}
data_1st |> 
  days_between(search_criterion = as_mo_shortname,
               organism_of_interest = "S. aureus")
```

## Enterococcus blood culture data

### Distinct patients with positive blood cultures per month

```{r NHSRplotthedots_patients_Enterococcus}
#number of distinct patients with positive blood cultures per month (using NHSRplotthedots)
data_1st %>% 
  filter(as_mo_genus == "Enterococcus") |> 
  mutate(new_date = floor_date(receive_date, 
                               unit = "1 month",
                               week_start = getOption("lubridate.week.start", 1)),
         year = year(receive_date)) %>% 
  distinct(new_date, hospital_number, .keep_all = TRUE) |> 
  group_by(year, new_date) %>%
  count() %>% 
  thicken(interval = "month",
          colname = 'thickened_date') |> 
  ungroup() |> 
  select(-new_date) |> 
  pad(interval = "month") %>% 
  fill_by_value() %>% 
  ptd_spc(value_field = n, date_field = thickened_date, improvement_direction = "decrease") %>% 
  ptd_create_ggplot(point_size = 2,
                    percentage_y_axis = FALSE,
                    main_title = "SPC chart",
                    x_axis_label = "date",
                    y_axis_label = "distinct patients (n)",
                    fixed_x_axis_multiple = TRUE,
                    fixed_y_axis_multiple = TRUE,
                    x_axis_date_format = "%m/%y",
                    x_axis_breaks = "3 months",
                    y_axis_breaks = NULL,
                    icons_size = 0L,
                    icons_position = c("top right", "bottom right", "bottom left", "top left", "none"),
                    colours = ptd_spc_colours(),
                    theme_override = NULL,
                    break_lines = c("both", "limits", "process", "none"))+
  labs(title = "Distinct patients with Enterococcus bacteraemias per month",
       subtitle = "First blood culture isolate per patient, Q1 2019 onwards",
       x = NULL,
       y = "n")+
  scale_y_continuous(minor_breaks = NULL,
                     breaks = function(x) unique(floor(pretty(seq(0, (max(x) + 1) * 1.1)))))
```

### Days since last Enterococcus bacteraemia

```{r days_since_last_Enterococcus}
data_1st |> 
  days_between(search_criterion = as_mo_genus,
               organism_of_interest = "Enterococcus")
```

## Candida blood culture data

### Distinct patients with positive blood cultures per month

```{r NHSRplotthedots_patients_Candida}
#number of distinct patients with positive blood cultures per month (using NHSRplotthedots)
data_1st %>% 
  filter(str_detect(organism_code_verbose, "^Candid.*")) |> 
  mutate(new_date = floor_date(receive_date, 
                               unit = "1 month",
                               week_start = getOption("lubridate.week.start", 1)),
         year = year(receive_date)) %>% 
  distinct(new_date, hospital_number, .keep_all = TRUE) |> 
  group_by(year, new_date) %>%
  count() %>% 
  thicken(interval = "month",
          colname = 'thickened_date') |> 
  ungroup() |> 
  select(-new_date) |> 
  pad(interval = "month") %>% 
  fill_by_value() %>%  
  ptd_spc(value_field = n, date_field = thickened_date, improvement_direction = "decrease") %>% 
  ptd_create_ggplot(point_size = 2,
                    percentage_y_axis = FALSE,
                    main_title = "SPC chart",
                    x_axis_label = "date",
                    y_axis_label = "distinct patients (n)",
                    fixed_x_axis_multiple = TRUE,
                    fixed_y_axis_multiple = TRUE,
                    x_axis_date_format = "%m/%y",
                    x_axis_breaks = "3 months",
                    y_axis_breaks = NULL,
                    icons_size = 0L,
                    icons_position = c("top right", "bottom right", "bottom left", "top left", "none"),
                    colours = ptd_spc_colours(),
                    theme_override = NULL,
                    break_lines = c("both", "limits", "process", "none"))+
  labs(title = "Distinct patients with candidaemias per month",
       subtitle = "First blood culture isolate per patient, Q1 2019 onwards",
       x = NULL,
       y = "n")+
  scale_y_continuous(minor_breaks = NULL,
                     breaks = function(x) unique(floor(pretty(seq(0, (max(x) + 1) * 1.1)))))
```

### Days since last Candidaemia

```{r days_since_last_candidaemia}
data_1st |> 
  days_between(search_criterion = as_mo_genus,
               organism_of_interest = "Candida")
```

# Survival data

## Kaplan Meier plots

### Overall survival

```{r kaplan_meier_plot_overall}
p1 <- survfit2(Surv(receive_date_to_date_of_death, died_recoded) ~ 1, #stratify by e.g. taz susceptibility (2 = R, 1 = R, 0 = S)
         data = data_1st_survival_analysis_subset) %>% 
  ggsurvfit(size = 1) + #consider type = "cumhaz" / linetype_aes = TRUE
  labs(
    x = "Days",
    y = "Overall survival probability"
  ) + 
  add_confidence_interval() +
  add_risktable()+
  scale_y_continuous(minor_breaks = NULL,
                     limits = c(0.60, 1))+
  scale_x_continuous(limits = c(0, 365))+
  #ggsurvfit::add_pvalue()+
  ggsurvfit::theme_ggsurvfit_KMunicate()+
  ggsurvfit::add_censor_mark()
  #ggsurvfit::add_quantile()+
  #ggsurvfit::add_risktable_strata_symbol()+
  #ggsurvfit::theme_risktable_boxed()

p1
```

### Gram-stain related survival

```{r kaplan_meier_plot_gramstain}
p2 <- survfit2(Surv(receive_date_to_date_of_death, died_recoded) ~ as_mo_gramstain, 
               data = data_1st_survival_analysis_subset) %>% 
  ggsurvfit(size = 1) + #consider type = "cumhaz" / linetype_aes = TRUE
  labs(
    x = "Days",
    y = "Overall survival probability"
  ) + 
  add_confidence_interval() +
  add_risktable()+
  scale_y_continuous(minor_breaks = NULL,
                     limits = c(0.60, 1))+
  scale_x_continuous(limits = c(0, 365))+
  #ggsurvfit::add_pvalue()+
  ggsurvfit::theme_ggsurvfit_KMunicate()+
  ggsurvfit::add_censor_mark()
#ggsurvfit::add_quantile()+
#ggsurvfit::add_risktable_strata_symbol()+
#ggsurvfit::theme_risktable_boxed()

p2
```

### Organism related survival

```{r kaplan_meier_plot_organism}
p3 <- survfit2(Surv(receive_date_to_date_of_death, died_recoded) ~ as_mo_shortname_recoded, 
               data = data_1st_survival_analysis_subset) %>% 
  ggsurvfit(size = 1) + #consider type = "cumhaz" / linetype_aes = TRUE
  labs(
    x = "Days",
    y = "Overall survival probability"
  ) + 
  add_confidence_interval() +
  add_risktable()+
  scale_y_continuous(minor_breaks = NULL,
                     limits = c(0.60, 1))+
  scale_x_continuous(limits = c(0, 365))+
  #ggsurvfit::add_pvalue()+
  ggsurvfit::theme_ggsurvfit_KMunicate()+
  ggsurvfit::add_censor_mark()
#ggsurvfit::add_quantile()+
#ggsurvfit::add_risktable_strata_symbol()+
#ggsurvfit::theme_risktable_boxed()

p3
```

## X-year survival statistics

```{r x_year_survival}
list(survfit(Surv(time =  receive_date_to_date_of_death,
                  event = died_recoded) ~ 1,
             data = data_1st_survival_analysis_subset)
     ,
     survfit(Surv(time =  receive_date_to_date_of_death,
                 event = died_recoded) ~ as_mo_gramstain,
            data = data_1st_survival_analysis_subset),
     survfit(Surv(time =  receive_date_to_date_of_death,
                  event = died_recoded) ~ as_mo_shortname_recoded,
             data = data_1st_survival_analysis_subset)
) |>
  tbl_survfit(
    times = c(90, 180, 365),
    label = list(as_mo_gramstain ~ "Gram stain result",
                 as_mo_shortname_recoded ~ "Organism isolated"),
    label_header = "**{time}-day survival (95% CI)**"
  )
```

# Organism-specific susceptibility test results

## E. coli

```{r gram_neg_AST_results_ecoli}
# E. coli 
data_1st |> 
  filter(str_detect(as_mo_genus, "Escherichia")) |> 
  select(year, hospital, as_mo_genus, AMX, AMC, TAZ, ETP, GEN, CIP, SXT, CAZ, CXM, ATM) |> #include only certain antibiotics
  group_by(year, as_mo_genus) |> 
  ggplot() + 
  # create bars with as_mo_genus on x axis. geom_sir looks for variables with class `sir` (earlier created with `as.sir`)
  geom_sir(x = "antibiotic", 
           translate_ab = FALSE,
           minimum = 10) + 
  #facet_sir(facet = "antibiotic") + # split plots on antibiotic
  scale_sir_colours() + #make R red and S/SI green and I yellow
  #scale_y_percent(breaks = 0:2 * 50) + # show percentages on y axis
  scale_y_continuous(minor_breaks = NULL,
                     limits = c(0, 1),
                     breaks = c(0, 0.5, 1),
                     label = c("0", "50", "100")) + # show percentages on y axis
  theme(axis.text.y = element_text(face = "italic"),
        axis.text.x = element_text(size = rel(0.9)),
        strip.text.y = element_text(size = rel(0.9),
                                    angle = 360),
        legend.position = "bottom") +
  coord_flip() +
  labs(title = "Susceptibility of E. coli and Klebsiella spp\nto selected antimicrobials, stratified by year",
       subtitle = "First blood culture isolate per patient, Q1 2019 onwards",
       x = NULL,
       y = "Percentage susceptibility",
       caption = "Calculation of percentage susceptibility requires min. 30 blood culture isolates per year")+
  # and print genus in italic to follow our convention
  # (is now y axis because we turned the plot)
  facet_grid(as_mo_genus ~ year)
```

## Klebsiella spp.

```{r gram_neg_AST_results_kleb}
# Kleb
data_1st |> 
  filter(str_detect(as_mo_genus, "Klebsiella")) |> 
  select(year, hospital, as_mo_genus, AMX, AMC, TAZ, ETP, GEN, CIP, SXT, CAZ, CXM, ATM) |> #include only certain antibiotics
  group_by(year, as_mo_genus) |> 
  ggplot() + 
  # create bars with as_mo_genus on x axis. geom_sir looks for variables with class `sir` (earlier created with `as.sir`)
  geom_sir(x = "antibiotic", 
           translate_ab = FALSE,
           minimum = 10) + 
  #facet_sir(facet = "antibiotic") + # split plots on antibiotic
  scale_sir_colours() + #make R red and S/SI green and I yellow
  #scale_y_percent(breaks = 0:2 * 50) + # show percentages on y axis
  scale_y_continuous(minor_breaks = NULL,
                     limits = c(0, 1),
                     breaks = c(0, 0.5, 1),
                     label = c("0", "50", "100")) + # show percentages on y axis
  theme(axis.text.y = element_text(face = "italic"),
        axis.text.x = element_text(size = rel(0.9)),
        strip.text.y = element_text(size = rel(0.9),
                                    angle = 360),
        legend.position = "bottom") +
  coord_flip() +
  labs(title = "Susceptibility of E. coli and Klebsiella spp\nto selected antimicrobials, stratified by year",
       subtitle = "First blood culture isolate per patient, Q1 2019 onwards",
       x = NULL,
       y = "Percentage susceptibility",
       caption = "Calculation of percentage susceptibility requires min. 30 blood culture isolates per year")+
  # and print genus in italic to follow our convention
  # (is now y axis because we turned the plot)
  facet_grid(as_mo_genus ~ year)
```

## Pseudomonas spp.

```{r gram_neg_AST_results_pseudo}
# Pseudomonas
data_1st |>
  filter(str_detect(as_mo_genus, "Pseudomonas")) |>
  select(year, hospital, as_mo_genus, TAZ, MEM, GEN, CIP, CAZ, ATM) |> #include only certain antibiotics
  group_by(year, as_mo_genus) |>
  ggplot() +
  # create bars with as_mo_genus on x axis. geom_sir looks for variables with class `sir` (earlier created with `as.sir`)
  geom_sir(x = "antibiotic",
           translate_ab = FALSE,
           minimum = 10) +
  #facet_sir(facet = "antibiotic") + # split plots on antibiotic
  scale_sir_colours() + #make R red and S/SI green and I yellow
  #scale_y_percent(breaks = 0:2 * 50) + # show percentages on y axis
  scale_y_continuous(limits = c(0, 1),
                     breaks = c(0, 0.5, 1),
                     label = c("0", "50", "100")) + # show percentages on y axis
  theme(axis.text.y = element_text(face = "italic"),
        axis.text.x = element_text(size = rel(0.9)),
        strip.text.y = element_text(size = rel(0.9),
                                    angle = 360),
        legend.position = "bottom") +
  coord_flip() +
  labs(title = "Susceptibility of Pseudomonas spp\nto selected antimicrobials, stratified by year",
       subtitle = "First blood culture isolate per patient, Q1 2019 onwards",
       x = NULL,
       y = "Percentage susceptibility",
       caption = "Calculation of percentage susceptibility requires min. 30 blood culture isolates per year")+
  # and print genus in italic to follow our convention
  # (is now y axis because we turned the plot)
  facet_grid(as_mo_genus ~ year)
```

## S. aureus 

```{r AST_results_staph_aureus}
# S. aureus
data_1st |> 
  filter(str_detect(as_mo_shortname, "S. aureus")) |> 
  select(year, hospital, as_mo_shortname, DOX, CLI, ERY, GEN, FLC, SXT, MFX) |> #include only certain antibiotics
  group_by(year, as_mo_shortname) |> 
  ggplot() + 
  # create bars with as_mo_genus on x axis. geom_sir looks for variables with class `sir` (earlier created with `as.sir`)
  geom_sir(x = "antibiotic", 
           translate_ab = FALSE,
           minimum = 10) + 
  #facet_sir(facet = "antibiotic") + # split plots on antibiotic
  scale_sir_colours() + #make R red and S/SI green and I yellow
  #scale_y_percent(breaks = 0:2 * 50) + # show percentages on y axis
  scale_y_continuous(minor_breaks = NULL,
                     limits = c(0, 1),
                     breaks = c(0, 0.5, 1),
                     label = c("0", "50", "100")) + # show percentages on y axis
  theme(axis.text.y = element_text(face = "italic"),
        axis.text.x = element_text(size = rel(0.9)),
        strip.text.y = element_text(size = rel(0.9),
                                    angle = 360),
        legend.position = "bottom") +
  coord_flip() +
  labs(title = NULL,
       subtitle = NULL,
       x = NULL,
       y = "Percentage susceptibility",
       caption = "Calculation of percentage susceptibility requires min. 30 blood culture isolates per year")+
  # and print genus in italic to follow our convention
  # (is now y axis because we turned the plot)
  facet_grid(as_mo_shortname ~ year)
```

## Enterococcus 

```{r AST_results_Enterococcus}
# Enterococcus
data_1st |> 
  filter(str_detect(as_mo_genus, "Enterococcus")) |> 
  select(year, hospital, as_mo_genus, AMX, TEC, LNZ) |> #include only certain antibiotics
  group_by(year, as_mo_genus) |> 
  ggplot() + 
  # create bars with as_mo_genus on x axis. geom_sir looks for variables with class `sir` (earlier created with `as.sir`)
  geom_sir(x = "antibiotic", 
           translate_ab = FALSE,
           minimum = 10) + 
  #facet_sir(facet = "antibiotic") + # split plots on antibiotic
  scale_sir_colours() + #make R red and S/SI green and I yellow
  #scale_y_percent(breaks = 0:2 * 50) + # show percentages on y axis
  scale_y_continuous(minor_breaks = NULL,
                     limits = c(0, 1),
                     breaks = c(0, 0.5, 1),
                     label = c("0", "50", "100")) + # show percentages on y axis
  theme(axis.text.y = element_text(face = "italic"),
        axis.text.x = element_text(size = rel(0.9)),
        strip.text.y = element_text(size = rel(0.9),
                                    angle = 360),
        legend.position = "bottom") +
  coord_flip() +
  labs(title = NULL,
       subtitle = NULL,
       x = NULL,
       y = "Percentage susceptibility",
       caption = "Calculation of percentage susceptibility requires min. 30 blood cuture isolates per year")+
  # and print genus in italic to follow our convention
  # (is now y axis because we turned the plot)
  facet_grid(as_mo_genus ~ year)
```

## Candida 

```{r AST_results_Candida}
# Candida
data_1st |>
  filter(str_detect(organism_code_verbose, "^Candid.*")) |> 
  select(year, hospital, as_mo_genus, AMB, ANI, CAS, FLU, FCT, ISV, ITR, MIF, POS, VOR) |> #include only certain antibiotics
  group_by(year, as_mo_genus) |> 
  ggplot() + 
  # create bars with as_mo_genus on x axis. geom_sir looks for variables with class `sir` (earlier created with `as.sir`)
  geom_sir(x = "antibiotic", 
           translate_ab = FALSE,
           minimum = 4) + 
  #facet_sir(facet = "antibiotic") + # split plots on antibiotic
  scale_sir_colours() + #make R red and S/SI green and I yellow
  #scale_y_percent(breaks = 0:2 * 50) + # show percentages on y axis
  scale_y_continuous(minor_breaks = NULL,
                     limits = c(0, 1),
                     breaks = c(0, 0.5, 1),
                     label = c("0", "50", "100")) + # show percentages on y axis
  theme(axis.text.y = element_text(face = "italic"),
        axis.text.x = element_text(size = rel(0.9)),
        strip.text.y = element_text(size = rel(0.9),
                                    angle = 360),
        legend.position = "bottom") +
  coord_flip() +
  labs(title = NULL,
       subtitle = NULL,
       x = NULL,
       y = "Percentage susceptibility",
       caption = "Calculation of percentage susceptibility requires min. 30 blood cuture isolates per year")+
  # and print genus in italic to follow our convention
  # (is now y axis because we turned the plot)
  facet_grid(as_mo_genus ~ year)
```

<!-- # Oral antibiotic treatment options -->

<!-- ## Resistance to commonly-used oral treatment options for Gram negative infections (Escherichia spp. and Klebsiella spp.) -->

<!-- Operational definition of resistance to commonly-used oral treatment options: Resistance to all of co-amoxiclav and ciprofloxacin and co-trimoxazole. -->

<!-- ```{r amc_cip_sxt_r_all} -->
<!-- #Gram neg R co-amoxiclav, cipro, and co-trim, all -->
<!-- data_1st %>%  -->
<!--   group_by(year) %>%  -->
<!--   filter(str_detect(as_mo_genus, "Escherichia|Klebsiella")) |>  -->
<!--   filter(!year == "2023") |> #filtering years with incomplete data -->
<!--   filter_at(vars(AMC, CIP, SXT),  -->
<!--             all_vars(!is.na(.))) |> -->
<!--   #filter across multiple columns with is.na / !is.na (https://stackoverflow.com/questions/33520854/filtering-data-frame-based-on-na-on-multiple-columns)  -->
<!--   filter(!str_detect(AMC, "S"), -->
<!--          CIP == "R", -->
<!--          SXT == "R") |> -->
<!--   count() |>  -->
<!--   ggplot(aes(year, n, group = 1)) + -->
<!--   geom_line(arrow = arrow(), -->
<!--             size = 2) + -->
<!--   theme(axis.text.x = element_text(angle = 90)) + -->
<!--   labs(title = "Resistance to commonly-used oral treatment options\nfor Gram negative infections", -->
<!--        subtitle = "First blood culture isolate per patient, Q1 2019 onwards", -->
<!--        x = NULL, -->
<!--        y = "n")+ -->
<!--   scale_fill_grey() + -->
<!--   expand_limits(y = 0) -->
<!-- ``` -->

<!-- # Carbapenem resistance -->

<!-- ## Carbapenem resistance by ward (Enterobacterales) -->

<!-- ```{r carbapenem_r_ward} -->
<!-- #carbapenem R by ward -->
<!-- data_1st %>%  -->
<!--   filter(as_mo_gramstain == "Gram-negative") |> #Gram negatives only -->
<!--   filter(str_detect(as_mo_genus, "Enterobacter|Escherichia|Klebsiella")) |>  # NOT pseudomonas -->
<!--   #filter(as_mo_mero_R == FALSE) |> # remove intrinsically mero R orgs -->
<!--   filter(any(carbapenems() == "R")) |> # select remaining mero R organisms -->
<!--   group_by(location_code, as_mo_genus) |>  -->
<!--   count() |>  -->
<!--   ungroup() |>  -->
<!--   group_by(location_code) |>  -->
<!--   mutate(sum = sum(n)) |>  -->
<!--   arrange(desc(sum)) |>  -->
<!--   ggplot()+ -->
<!--   geom_col(aes(fct_reorder(location_code, -sum), n, fill = as_mo_genus), position = "stack")+ -->
<!--   coord_flip()+ -->
<!--   labs(title = "Carbapenem resistance by ward\n(Enterobacterales)", -->
<!--        subtitle = "First blood culture isolate per patient, Q1 2019 onwards", -->
<!--        x = NULL, -->
<!--        y = NULL) + -->
<!--   guides(fill=guide_legend("Genus")) + #change legend title  -->
<!--   scale_fill_grey() -->
<!-- ``` -->

<!-- ## Carbapenem resistance by hospital (All Gram negatives) -->

<!-- ```{r carbapenem_r_hospital} -->
<!-- #carbapenem R by hospital -->
<!-- data_1st %>%  -->
<!--   filter(as_mo_gramstain == "Gram-negative") |> #Gram negatives only -->
<!--   #filter(!as_mo_genus == "Pseudomonas") |>  # NOT pseudomonas -->
<!--   #filter(as_mo_mero_R == FALSE) |> # remove intrinsically mero R orgs -->
<!--   filter(any(carbapenems() == "R")) |> # select remaining mero R organisms -->
<!--   group_by(hospital, as_mo_genus) |>  -->
<!--   add_count(name = "n_hospital") |>  -->
<!--   select(as_mo_genus, hospital, n_hospital) |> -->
<!--   distinct(as_mo_genus, hospital, .keep_all = TRUE) |>  -->
<!--   #arrange(desc(n_total)) |>  -->
<!--   ggplot()+ -->
<!--   geom_col(aes(fct_reorder(as_mo_genus, n_hospital), n_hospital, fill = hospital), position = "dodge2")+ -->
<!--   coord_flip()+ -->
<!--   labs(title = "Carbapenem resistance by hospital\n(All Gram negatives)", -->
<!--        subtitle = "First blood culture isolate per patient, Q1 2019 onwards", -->
<!--        x = NULL, -->
<!--        y = NULL) + -->
<!--   scale_fill_grey() -->
<!-- ``` -->

<!-- # Gram-negative predicted antibiotic-specific AMR rates  -->

<!-- ## Amoxicillin  -->

<!-- ```{r amr_predict_gram_neg_amox} -->
<!-- amr_predict(x = data_1st, -->
<!--             Gramstain = "Gram-negative",  -->
<!--             ab_amr_code = "AMX", -->
<!--             ab_nuth_code = "AMX",  -->
<!--             ab_name = "Amoxicillin",  -->
<!--             model_type = "linear") -->
<!-- ``` -->

<!-- ## Co-amoxiclav  -->

<!-- ```{r amr_predict_gram_neg_coamox} -->
<!-- amr_predict(x = data_1st, -->
<!--             Gramstain = "Gram-negative",  -->
<!--             ab_amr_code = "AMC", -->
<!--             ab_nuth_code = "AMC",  -->
<!--             ab_name = "Co-amoxiclav",  -->
<!--             model_type = "linear") -->
<!-- ``` -->

<!-- ## Temocillin  -->

<!-- ```{r amr_predict_gram_neg_tem} -->
<!-- amr_predict(x = data_1st, -->
<!--             Gramstain = "Gram-negative",  -->
<!--             ab_amr_code = "TEM", -->
<!--             ab_nuth_code = "TEM",  -->
<!--             ab_name = "Temocillin",  -->
<!--             model_type = "linear") -->
<!-- ``` -->

<!-- ## Tazocin  -->

<!-- ```{r amr_predict_gram_neg_taz} -->
<!-- amr_predict(x = data_1st, -->
<!--             Gramstain = "Gram-negative",  -->
<!--             ab_amr_code = "TZP", -->
<!--             ab_nuth_code = "TZP",  -->
<!--             ab_name = "Tazocin",  -->
<!--             model_type = "linear") -->
<!-- ``` -->
<!-- ## Cefuroxime  -->

<!-- ```{r amr_predict_gram_neg_cxm} -->
<!-- amr_predict(x = data_1st, -->
<!--             Gramstain = "Gram-negative",  -->
<!--             ab_amr_code = "CXM", -->
<!--             ab_nuth_code = "CXM",  -->
<!--             ab_name = "Cefuroxime",  -->
<!--             model_type = "linear") -->
<!-- ``` -->

<!-- ## Ceftazidime  -->

<!-- ```{r amr_predict_gram_neg_caz} -->
<!-- amr_predict(x = data_1st, -->
<!--             Gramstain = "Gram-negative",  -->
<!--             ab_amr_code = "CAZ", -->
<!--             ab_nuth_code = "CAZ",  -->
<!--             ab_name = "Ceftazidime",  -->
<!--             model_type = "linear") -->
<!-- ``` -->

<!-- ## Aztreonam  -->

<!-- ```{r amr_predict_gram_neg_atm} -->
<!-- amr_predict(x = data_1st, -->
<!--             Gramstain = "Gram-negative",  -->
<!--             ab_amr_code = "ATM", -->
<!--             ab_nuth_code = "ATM",  -->
<!--             ab_name = "Aztreonam",  -->
<!--             model_type = "linear") -->
<!-- ``` -->

<!-- ## Ertapenem  -->

<!-- ```{r amr_predict_gram_neg_etp} -->
<!-- amr_predict(x = data_1st, -->
<!--             Gramstain = "Gram-negative",  -->
<!--             ab_amr_code = "ETP", -->
<!--             ab_nuth_code = "ETP",  -->
<!--             ab_name = "Ertapenem",  -->
<!--             model_type = "linear") -->
<!-- ``` -->

<!-- ## Ciprofloxacin  -->

<!-- ```{r amr_predict_gram_neg_cip} -->
<!-- amr_predict(x = data_1st, -->
<!--             Gramstain = "Gram-negative",  -->
<!--             ab_amr_code = "CIP", -->
<!--             ab_nuth_code = "CIP",  -->
<!--             ab_name = "Ciprofloxacin",  -->
<!--             model_type = "linear") -->
<!-- ``` -->

<!-- ## Gentamicin  -->

<!-- ```{r amr_predict_gram_neg_gen} -->
<!-- amr_predict(x = data_1st, -->
<!--             Gramstain = "Gram-negative",  -->
<!--             ab_amr_code = "GEN", -->
<!--             ab_nuth_code = "GEN",  -->
<!--             ab_name = "Gentamicin",  -->
<!--             model_type = "linear") -->
<!-- ``` -->

<!-- ## Amikacin  -->

<!-- ```{r amr_predict_gram_neg_amk} -->
<!-- amr_predict(x = data_1st, -->
<!--             Gramstain = "Gram-negative",  -->
<!--             ab_amr_code = "AMK", -->
<!--             ab_nuth_code = "AMK",  -->
<!--             ab_name = "Amikacin",  -->
<!--             model_type = "linear") -->
<!-- ``` -->

<!-- ## Tobramycin  -->

<!-- ```{r amr_predict_gram_neg_tob} -->
<!-- amr_predict(x = data_1st, -->
<!--             Gramstain = "Gram-negative",  -->
<!--             ab_amr_code = "TOB", -->
<!--             ab_nuth_code = "TOB",  -->
<!--             ab_name = "Tobramycin",  -->
<!--             model_type = "linear") -->
<!-- ``` -->

<!-- ## Co-trimoxazole  -->

<!-- ```{r amr_predict_gram_neg_sxt} -->
<!-- amr_predict(x = data_1st, -->
<!--             Gramstain = "Gram-negative",  -->
<!--             ab_amr_code = "SXT", -->
<!--             ab_nuth_code = "SXT",  -->
<!--             ab_name = "Co-trimoxazole",  -->
<!--             model_type = "linear") -->
<!-- ``` -->

<!-- ## Chloramphenicol  -->

<!-- ```{r amr_predict_gram_neg_chl} -->
<!-- amr_predict(x = data_1st, -->
<!--             Gramstain = "Gram-negative",  -->
<!--             ab_amr_code = "CHL", -->
<!--             ab_nuth_code = "CHL",  -->
<!--             ab_name = "Chloramphenicol",  -->
<!--             model_type = "linear") -->
<!-- ``` -->

<!-- ## Tigecycline  -->

<!-- ```{r amr_predict_gram_neg_tig} -->
<!-- amr_predict(x = data_1st, -->
<!--             Gramstain = "Gram-negative",  -->
<!--             ab_amr_code = "TGC", -->
<!--             ab_nuth_code = "TGC",  -->
<!--             ab_name = "Tigecycline",  -->
<!--             model_type = "linear") -->
<!-- ``` -->

<!-- # Gram-positive predicted antibiotic-specific AMR rates  -->

<!-- ## Amoxicillin  -->

<!-- ```{r amr_predict_gram_pos_amox} -->
<!-- amr_predict(x = data_1st, -->
<!--             Gramstain = "Gram-positive",  -->
<!--             ab_amr_code = "AMX", -->
<!--             ab_nuth_code = "AMX",  -->
<!--             ab_name = "Amoxicillin",  -->
<!--             model_type = "linear") -->
<!-- ``` -->

<!-- ## Clindamycin  -->

<!-- ```{r amr_predict_gram_pos_cli} -->
<!-- amr_predict(x = data_1st, -->
<!--             Gramstain = "Gram-positive",  -->
<!--             ab_amr_code = "CLI", -->
<!--             ab_nuth_code = "CLI",  -->
<!--             ab_name = "Clindamycin",  -->
<!--             model_type = "linear") -->
<!-- ``` -->

<!-- ## Doxycycline  -->

<!-- ```{r amr_predict_gram_pos_dox} -->
<!-- amr_predict(x = data_1st, -->
<!--             Gramstain = "Gram-positive",  -->
<!--             ab_amr_code = "DOX", -->
<!--             ab_nuth_code = "DOX",  -->
<!--             ab_name = "Doxycycline",  -->
<!--             model_type = "linear") -->
<!-- ``` -->

<!-- ## Flucloxacillin  -->

<!-- ```{r amr_predict_gram_pos_flc} -->
<!-- amr_predict(x = data_1st, -->
<!--             Gramstain = "Gram-positive",  -->
<!--             ab_amr_code = "FLC", -->
<!--             ab_nuth_code = "FLC",  -->
<!--             ab_name = "Flucloxacillin",  -->
<!--             model_type = "linear") -->
<!-- ``` -->

<!-- ## Erythromycin  -->

<!-- ```{r amr_predict_gram_pos_ery} -->
<!-- amr_predict(x = data_1st, -->
<!--             Gramstain = "Gram-positive",  -->
<!--             ab_amr_code = "ERY", -->
<!--             ab_nuth_code = "ERY",  -->
<!--             ab_name = "Erythromycin",  -->
<!--             model_type = "linear") -->
<!-- ``` -->

<!-- ## Teicoplanin  -->

<!-- ```{r amr_predict_gram_pos_tec} -->
<!-- amr_predict(x = data_1st, -->
<!--             Gramstain = "Gram-positive",  -->
<!--             ab_amr_code = "TEC", -->
<!--             ab_nuth_code = "TEC",  -->
<!--             ab_name = "Teicoplanin",  -->
<!--             model_type = "linear") -->
<!-- ``` -->

<!-- ## Daptomycin  -->

<!-- ```{r amr_predict_gram_pos_dap} -->
<!-- amr_predict(x = data_1st, -->
<!--             Gramstain = "Gram-positive",  -->
<!--             ab_amr_code = "DAP", -->
<!--             ab_nuth_code = "DAP",  -->
<!--             ab_name = "Daptomycin",  -->
<!--             model_type = "linear") -->
<!-- ``` -->

<!-- ## Gentamicin  -->

<!-- ```{r amr_predict_gram_pos_gen} -->
<!-- amr_predict(x = data_1st, -->
<!--             Gramstain = "Gram-positive",  -->
<!--             ab_amr_code = "GEN", -->
<!--             ab_nuth_code = "GEN",  -->
<!--             ab_name = "Gentamicin",  -->
<!--             model_type = "linear") -->
<!-- ``` -->

<!-- ## Co-trimoxazole  -->

<!-- ```{r amr_predict_gram_pos_sxt} -->
<!-- amr_predict(x = data_1st, -->
<!--             Gramstain = "Gram-positive",  -->
<!--             ab_amr_code = "SXT", -->
<!--             ab_nuth_code = "SXT",  -->
<!--             ab_name = "Co-trimoxazole",  -->
<!--             model_type = "linear") -->
<!-- ``` -->

<!-- ## Chloramphenicol  -->

<!-- ```{r amr_predict_gram_pos_chl} -->
<!-- amr_predict(x = data_1st, -->
<!--             Gramstain = "Gram-positive",  -->
<!--             ab_amr_code = "CHL", -->
<!--             ab_nuth_code = "CHL",  -->
<!--             ab_name = "Chloramphenicol",  -->
<!--             model_type = "linear") -->
<!-- ``` -->

<!-- ## Linezolid  -->

<!-- ```{r amr_predict_gram_pos_lnz} -->
<!-- amr_predict(x = data_1st, -->
<!--             Gramstain = "Gram-positive",  -->
<!--             ab_amr_code = "LNZ", -->
<!--             ab_nuth_code = "LNZ",  -->
<!--             ab_name = "Linezolid",  -->
<!--             model_type = "linear") -->
<!-- ``` -->

# Overall predicted antimicrobial resistance rates

## Gram-negative organisms

```{r amr_predict_gram_neg}
# Gram neg ----------------------------------------------------------------

#create tibble using map2 and gram_neg_ab_tibble and amr_predict_for_mapping
amr_predict_gram_neg_mapped_output <- map2(.x = gram_neg_ab_tibble$skim_variable,
        .y = gram_neg_ab_tibble$sir.ab_name,
        .f = ~amr_predict_for_mapping(x = data_1st,
                                       Gramstain = "Gram-negative", 
                                       ab_amr_code = .x, 
                                       ab_nuth_code = .x, 
                                       ab_name = .y, 
                                       model_type = "linear"
        ))

#print output using patchwork::wrap_plots()
patchwork::wrap_plots(amr_predict_gram_neg_mapped_output, 
                      nrow = 2) + 
  patchwork::plot_layout(guides = 'collect')+
  patchwork::plot_annotation(
    title = glue::glue("Predicted AMR rates of ", "Gram-negative", " organisms to select antimicrobials"),
    #subtitle = glue::glue(""),
    #tag_levels = 'I',
    caption = glue::glue("First blood culture isolate per patient, Q1 2019 onwards, \nexcluding organisms intrinsically resistant to the tested antimicrobial")
  ) +
  xlab("year")+
  ylab("% resistance")
```

## Klebsiella spp.

```{r amr_predict_kleb}
# Gram neg ----------------------------------------------------------------

data_1st_klebsiella <- data_1st |> 
  filter(as_mo_genus == "Klebsiella") 

#create tibble using map2 and kleb_ab_tibble and amr_predict_for_mapping
amr_predict_kleb_mapped_output <- map2(.x = kleb_ab_tibble$skim_variable,
        .y = kleb_ab_tibble$sir.ab_name,
        .f = ~amr_predict_for_mapping(x = data_1st_klebsiella,
                                       Gramstain = "Gram-negative",
                                       ab_amr_code = .x,
                                       ab_nuth_code = .x,
                                       ab_name = .y,
                                       model_type = "linear"
        ))

#print output using patchwork::wrap_plots()
patchwork::wrap_plots(amr_predict_kleb_mapped_output,
                      nrow = 2) +
  patchwork::plot_layout(guides = 'collect')+
  patchwork::plot_annotation(
    title = glue::glue("Predicted AMR rates of ", "Klebsiella spp", " to select antimicrobials"),
    #subtitle = glue::glue(""),
    #tag_levels = 'I',
    caption = glue::glue("First blood culture isolate per patient, Q1 2019 onwards, \nexcluding organisms intrinsically resistant to the tested antimicrobial")
  ) +
  xlab("year")+
  ylab("% resistance")
```

## Gram-positive organisms

```{r amr_predict_gram_pos}
# Gram pos ----------------------------------------------------------------

data_1st_no_cons <- data_1st |> 
  filter(!as_mo_shortname_lump == "CoNS")

#create tibble using map2 and gram_pos_ab_tibble and amr_predict_for_mapping
amr_predict_gram_pos_mapped_output <- map2(.x = gram_pos_ab_tibble$skim_variable,
                                           .y = gram_pos_ab_tibble$sir.ab_name,
                                           .f = ~amr_predict_for_mapping(x = data_1st_no_cons,
                                                                         Gramstain = "Gram-positive", 
                                                                         ab_amr_code = .x, 
                                                                         ab_nuth_code = .x, 
                                                                         ab_name = .y, 
                                                                         model_type = "linear"
                                           ))

#print output using patchwork::wrap_plots()
patchwork::wrap_plots(amr_predict_gram_pos_mapped_output, 
                      nrow = 2) + 
  patchwork::plot_layout(guides = 'collect')+
  patchwork::plot_annotation(
    title = glue::glue("Predicted AMR rates of ", "Gram-positive", " organisms to select antimicrobials"),
    #subtitle = glue::glue(""),
    #tag_levels = 'I',
    caption = glue::glue("First blood culture isolate per patient, Q1 2019 onwards, \nexcluding organisms intrinsically resistant to the tested antimicrobial and \n excluding coagulase-negative staphylococci")
  ) +
  xlab("year")+
  ylab("% resistance")
```

<!-- # Gram-negative substratified AMR data -->

<!-- ## Stratified by hospital -->

<!-- ```{r by_hospital_gram_neg_walk} -->
<!-- # by_hospital - Gram-negative - AMR prediction -->
<!-- by_hospital_gram_neg_amr <- map2(.x = gram_neg_ab_tibble$skim_variable, -->
<!--                                  .y = gram_neg_ab_tibble$sir.ab_name, -->
<!--                                  .f = ~amr_predict_chart_nested(x = data_1st, -->
<!--                                                                 Gramstain = "Gram-negative",  -->
<!--                                                                 ab_amr_code = .x,  -->
<!--                                                                 nesting_crit = hospital,  -->
<!--                                                                 nesting_name = "hospital",  -->
<!--                                                                 n_bc = 100, -->
<!--                                                                 ab_nuth_code = .x,  -->
<!--                                                                 ab_name = .y,  -->
<!--                                                                 model_type = "linear", -->
<!--                                                                 nrow = 1, -->
<!--                                                                 plot_subtitle = NULL -->
<!--                                  )) -->

<!-- # # walk  -->
<!-- walk(by_hospital_gram_neg_amr, print) -->

<!-- #or print select antimicrobial -->
<!-- # by_hospital_gram_neg_amr[[9]] #tazocin = 9 -->

<!-- ``` -->

<!-- ## Stratified by directorate -->

<!-- ```{r by_directorate_gram_neg_walk} -->
<!-- # by_directorate - Gram-negative - AMR prediction --------------------------------- -->
<!-- by_directorate_gram_neg_amr <- map2(.x = gram_neg_ab_tibble$skim_variable, -->
<!--      .y = gram_neg_ab_tibble$sir.ab_name, -->
<!--      .f = ~amr_predict_chart_nested(x = data_1st, -->
<!--                              Gramstain = "Gram-negative",  -->
<!--                              ab_amr_code = .x,  -->
<!--                              nesting_crit = directorate_lump,  -->
<!--                              nesting_name = "directorate",  -->
<!--                              n_bc = 100, -->
<!--                              ab_nuth_code = .x,  -->
<!--                              ab_name = .y,  -->
<!--                              model_type = "linear", -->
<!--                              nrow = 2, -->
<!--                              plot_subtitle = NULL -->
<!--      )) -->

<!-- # #walk -->
<!-- walk(by_directorate_gram_neg_amr, print) -->

<!-- # #or print select antimicrobial -->
<!-- # by_directorate_gram_neg_amr[[9]] #tazocin = 9 -->

<!-- ``` -->

<!-- ## Stratified by location (ward) -->

<!-- ```{r by_location_lump_gram_neg_walk} -->
<!-- # by_location_lump - Gram-negative - AMR prediction --------------------------------- -->
<!-- by_location_lump_gram_neg_amr <- map2(.x = gram_neg_ab_tibble$skim_variable, -->
<!--      .y = gram_neg_ab_tibble$sir.ab_name, -->
<!--      .f = ~amr_predict_chart_nested(x = data_1st, -->
<!--                              Gramstain = "Gram-negative",  -->
<!--                              ab_amr_code = .x,  -->
<!--                              nesting_crit = location_lump,  -->
<!--                              nesting_name = "location",  -->
<!--                              n_bc = 100, -->
<!--                              ab_nuth_code = .x,  -->
<!--                              ab_name = .y,  -->
<!--                              model_type = "linear", -->
<!--                              nrow = 2, -->
<!--                              plot_subtitle = NULL -->
<!--      )) -->

<!-- # #walk -->
<!-- walk(by_location_lump_gram_neg_amr, print) -->

<!-- # #or print select antimicrobial -->
<!-- # by_location_lump_gram_neg_amr[[9]] #tazocin = 9 -->

<!-- ``` -->

<!-- ## Stratified by age group -->

<!-- ```{r by_age_group_gram_neg_walk} -->
<!-- # by_age_group - Gram-negative - AMR prediction -->
<!-- by_age_group_gram_neg_amr <- map2(.x = gram_neg_ab_tibble$skim_variable, -->
<!--                                     .y = gram_neg_ab_tibble$sir.ab_name, -->
<!--                                     .f = ~amr_predict_chart_nested(x = data_1st, -->
<!--                                                             Gramstain = "Gram-negative",  -->
<!--                                                             ab_amr_code = .x,  -->
<!--                                                             nesting_crit = age_group,  -->
<!--                                                             nesting_name = "age group",  -->
<!--                                                             n_bc = 100, -->
<!--                                                             ab_nuth_code = .x,  -->
<!--                                                             ab_name = .y,  -->
<!--                                                             model_type = "linear", -->
<!--                                                             nrow = 2, -->
<!--                                                             plot_subtitle = NULL -->
<!--                                     )) -->

<!-- # # walk  -->
<!-- walk(by_age_group_gram_neg_amr, print) -->

<!-- #or print select antimicrobial -->
<!-- # by_age_group_gram_neg_amr[[9]] #tazocin = 9 -->
<!-- ``` -->

<!-- ## Stratified by diabetes -->

<!-- ```{r by_diabetes_gram_neg_walk} -->
<!-- # by_diabetes - Gram-negative - AMR prediction -->
<!-- by_diabetes_gram_neg_amr <- map2(.x = gram_neg_ab_tibble$skim_variable, -->
<!--                                  .y = gram_neg_ab_tibble$sir.ab_name, -->
<!--                                  .f = ~amr_predict_chart_nested(x = data_1st, -->
<!--                                                          Gramstain = "Gram-negative",  -->
<!--                                                          ab_amr_code = .x,  -->
<!--                                                          nesting_crit = diabetic,  -->
<!--                                                          nesting_name = "diabetic",  -->
<!--                                                          n_bc = 100, -->
<!--                                                          ab_nuth_code = .x,  -->
<!--                                                          ab_name = .y,  -->
<!--                                                          model_type = "linear", -->
<!--                                                          nrow = 1, -->
<!--                                                          plot_subtitle = NULL -->
<!--                                  )) -->

<!-- # # walk  -->
<!-- walk(by_diabetes_gram_neg_amr, print) -->

<!-- #or print select antimicrobial -->
<!-- # by_diabetes_gram_neg_amr[[9]] #tazocin = 9 -->
<!-- ``` -->



<!-- # Gram-positive substratified AMR data -->

<!-- ## Stratified by hospital -->

<!-- ```{r gram_pos_by_hospital} -->
<!-- # by_hospital ------------------------------------------------------------- -->

<!-- # by_hospital - Gram-positive - AMR prediction -->
<!-- by_hospital_gram_pos_amr <- map2(.x = gram_pos_ab_tibble$skim_variable, -->
<!--                                  .y = gram_pos_ab_tibble$sir.ab_name, -->
<!--                                  .f = ~amr_predict_chart_nested(x = data_1st, -->
<!--                                                                 Gramstain = "Gram-positive",  -->
<!--                                                                 ab_amr_code = .x,  -->
<!--                                                                 nesting_crit = hospital,  -->
<!--                                                                 nesting_name = "hospital",  -->
<!--                                                                 n_bc = 100, -->
<!--                                                                 ab_nuth_code = .x,  -->
<!--                                                                 ab_name = .y,  -->
<!--                                                                 model_type = "linear", -->
<!--                                                                 nrow = 1, -->
<!--                                                                 plot_subtitle = NULL -->
<!--                                  )) -->

<!-- # walk -->
<!-- walk(by_hospital_gram_pos_amr, print) -->

<!-- # #or print select antimicrobial -->
<!-- # by_hospital_gram_pos_amr[[1]] -->
<!-- ``` -->

<!-- ## Stratified by directorate -->

<!-- ```{r gram_pos_by_directorate} -->
<!-- # by_directorate - Gram-positive - AMR prediction -->
<!-- by_directorate_gram_pos_amr <- map2(.x = gram_pos_ab_tibble$skim_variable, -->
<!--                                     .y = gram_pos_ab_tibble$sir.ab_name, -->
<!--                                     .f = ~amr_predict_chart_nested(x = data_1st, -->
<!--                                                                    Gramstain = "Gram-positive",  -->
<!--                                                                    ab_amr_code = .x,  -->
<!--                                                                    nesting_crit = directorate_lump,  -->
<!--                                                                    nesting_name = "directorate",  -->
<!--                                                                    n_bc = 100, -->
<!--                                                                    ab_nuth_code = .x,  -->
<!--                                                                    ab_name = .y,  -->
<!--                                                                    model_type = "linear", -->
<!--                                                                    nrow = 2, -->
<!--                                                                    plot_subtitle = NULL -->
<!--                                     )) -->

<!-- #walk -->
<!-- walk(by_directorate_gram_pos_amr, print) -->

<!-- # #or print select antimicrobial -->
<!-- # by_directorate_gram_pos_amr[[1]] -->
<!-- ``` -->

<!-- ## Stratified by location (ward) -->

<!-- ```{r gram_pos_by_location_lump} -->
<!-- # by_location_lump - Gram-positive - AMR prediction -->
<!-- by_location_lump_gram_pos_amr <- map2(.x = gram_pos_ab_tibble$skim_variable, -->
<!--                                     .y = gram_pos_ab_tibble$sir.ab_name, -->
<!--                                     .f = ~amr_predict_chart_nested(x = data_1st, -->
<!--                                                                    Gramstain = "Gram-positive",  -->
<!--                                                                    ab_amr_code = .x,  -->
<!--                                                                    nesting_crit = location_lump,  -->
<!--                                                                    nesting_name = "location",  -->
<!--                                                                    n_bc = 100, -->
<!--                                                                    ab_nuth_code = .x,  -->
<!--                                                                    ab_name = .y,  -->
<!--                                                                    model_type = "linear", -->
<!--                                                                    nrow = 2, -->
<!--                                                                    plot_subtitle = NULL -->
<!--                                     )) -->

<!-- #walk -->
<!-- walk(by_location_lump_gram_pos_amr, print) -->

<!-- # #or print select antimicrobial -->
<!-- # by_location_lump_gram_pos_amr[[1]] -->
<!-- ``` -->

<!-- ## Stratified by age group -->

<!-- ```{r gram_pos_by_age_group} -->
<!-- # by_age_group ------------------------------------------------------------ -->

<!-- # by_age_group - Gram-positive - AMR prediction -->
<!-- by_age_group_gram_pos_amr <- map2(.x = gram_pos_ab_tibble$skim_variable, -->
<!--                                   .y = gram_pos_ab_tibble$sir.ab_name, -->
<!--                                   .f = ~amr_predict_chart_nested(x = data_1st, -->
<!--                                                                  Gramstain = "Gram-positive",  -->
<!--                                                                  ab_amr_code = .x,  -->
<!--                                                                  nesting_crit = age_group,  -->
<!--                                                                  nesting_name = "age group",  -->
<!--                                                                  n_bc = 100, -->
<!--                                                                  ab_nuth_code = .x,  -->
<!--                                                                  ab_name = .y,  -->
<!--                                                                  model_type = "linear", -->
<!--                                                                  nrow = 2, -->
<!--                                                                  plot_subtitle = NULL -->
<!--                                   )) -->

<!-- # walk -->
<!-- walk(by_age_group_gram_pos_amr, print) -->

<!-- # #or print select antimicrobial -->
<!-- # by_age_group_gram_pos_amr[[1]] -->
<!-- ``` -->

<!-- ## Stratified by diabetes -->

<!-- ```{r gram_pos_by_diabetes} -->
<!-- # by_diabetes - Gram-positive - AMR prediction -->
<!-- by_diabetes_gram_pos_amr <- map2(.x = gram_pos_ab_tibble$skim_variable, -->
<!--                                  .y = gram_pos_ab_tibble$sir.ab_name, -->
<!--                                  .f = ~amr_predict_chart_nested(x = data_1st, -->
<!--                                                                 Gramstain = "Gram-positive",  -->
<!--                                                                 ab_amr_code = .x,  -->
<!--                                                                 nesting_crit = diabetic,  -->
<!--                                                                 nesting_name = "diabetic",  -->
<!--                                                                 n_bc = 100, -->
<!--                                                                 ab_nuth_code = .x,  -->
<!--                                                                 ab_name = .y,  -->
<!--                                                                 model_type = "linear", -->
<!--                                                                 nrow = 1, -->
<!--                                                                 plot_subtitle = NULL -->
<!--                                  )) -->

<!-- # walk -->
<!-- walk(by_diabetes_gram_pos_amr, print) -->
<!-- #  -->
<!-- # #or print select antimicrobial -->
<!-- # by_diabetes_gram_pos_amr[[1]] -->
<!-- ``` -->

# References {.unnumbered}

::: {#refs}
:::

<!-- # Appendix {.unnumbered} -->

```{r beepr_finished}
beepr::beep(3)
```

