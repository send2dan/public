Git team collaboration rulebook.
I am looking at what groundrules we put in as a team now that we are starting to collaborate across projects (internally to my trust, but I guess the same goes for NHSR repos).  I'm going to start typing below, and it would be great if folk could either add too, or counter this with potential pitfalls...
Eventually this will be a guideline in our team, and will probably also cover project directory structures in both python and r, as well as release tagging etc.  For the time being the aim is simplicity.
Ensure the project is not "private", unless there is agreement that the project is sensitive.  Code sharing is the name of the game, and this transparency will repay us in unexpected ways later. 
Protect the main branch.  All work should be added to main via a pull-request (github) or merge request (gitlab). 
Work locally in another branch with your initials in it (eg. ts_development, ts_fix_issue_10).  Avoid committing to main branch, which will cause problems with point #2 above. 
Commit your work frequently, in small steps, with short descriptive commit messages, and ideally in commit groups that keep the project functioning (ie. commit all files linked to a change, not individual files separately).  Use the "stage chunk" functionality to keep commits logical where possible. 
Tend to pushing local branches up to the server frequently (daily is better than weekly).  This ensures work in progress is backed up and available to the rest of the team.  Again, transparency repays us in unexpected ways later. 
When ready to submit a merge request, push your branch up, ensuring it is named helpfully, and ideally linked to an issue.  For all but the smallest of changes consider raising an issue to help document the reasons for the changes.  The work should not be merged to main without a code review.
Code review is with one other person from the team (anyone).  Book the meeting ahead of time where possible. 
Code reviewers should:
Sanity check the gitignore, and check for any data.
Ideally run the project locally to ensure it is still reproducible.  If it is a package, run CRAN check and run the tests. 
Check that the changes are in line with project intent, and are efficient.
Favour code readability over clever tricks.  Keep in mind the most junior member of the team.  The code should be understandable (with effort) to all on the team.  If the code is stretching this, by all means still commit, but book a team meeting slot to take the rest of the team through it. 

"We never have time to do it right, but we always have time to do it over". Could have been written about GitHub etiquette

https://the-strategy-unit.github.io/data_science/style/git_and_github.html